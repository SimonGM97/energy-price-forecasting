import sys
import os

# Add the energy-price-forecasting directory to the Python path
project_root = os.path.abspath(os.path.join(os.getcwd(), '..', 'energy-price-forecasting'))
sys.path.append(project_root)

import pandas as pd
import json
from pprint import pformat

from data_processing.data_cleaning import clean_energy_df, clean_weather_df
from data_processing.feature_engineering import engineer_features
from data_processing.data_transforming import standardize_X
from modeling.model import Model
from utils.s3_utils import load_from_s3, write_to_s3
from config.config import BUCKET

import warnings
warnings.filterwarnings("ignore")


def lambda_handler(
    event: dict, 
    context: dict = None
) -> dict:
    """
    :param `event`: (dict) Data sent during lambda function invocation.
    :param `context`: (dict) Generated by the platform and contains information about the underlying infrastructure
        and execution environment, such as allowed runtime and memory.
    """
    # Load raw DataFrames
    energy_df: pd.DataFrame = load_from_s3(path=f"{BUCKET}/datasets/energy_dataset.csv")
    weather_df: pd.DataFrame = load_from_s3(path=f"{BUCKET}/datasets/weather_features.csv")

    # Clean raw DataFrames
    energy_df: pd.DataFrame = clean_energy_df(energy_df=energy_df)
    weather_df: pd.DataFrame = clean_weather_df(weather_df=weather_df)

    # Create engineered features
    _, X = engineer_features(
        energy_df=energy_df,
        weather_df=weather_df,
        show_plots=False
    )

    # Standardize features
    X_stand: pd.DataFrame = standardize_X(X=X)

    # Load champion Model
    champion: Model = Model()
    champion.load(champion=True)

    # Prepare X_fcst
    X_fcst: pd.DataFrame = X_stand[champion.selected_features].iloc[-1:]

    # Forecast test data
    test_pred = champion.predict(
        forecast_features=X_fcst, 
        forecast_dates=X_fcst.index
    )

    # Build test_pred dict
    date_pred = X_fcst.index[0]
    test_pred: dict = {
        'date': str(date_pred),
        'prediction': test_pred[0]
    }

    # Extract year, month, day & hour
    day = date_pred.day
    month = date_pred.month
    year = date_pred.year
    hour = date_pred.hour

    # Save test_pred
    write_to_s3(
        asset=test_pred,
        path=f"{BUCKET}/inferences/year={year}/month={month}/day={day}/pred_hour={hour}.json"
    )

    return {
        'statusCode': 200,
        'body': json.dumps(test_pred)
    }


# conda deactivate
# source .price_forecasting_env/bin/activate
# .price_forecasting_env/bin/python inference/inference.py
if __name__ == "__main__":
    # Run lambda function
    lambda_handler(event=None, context=None)